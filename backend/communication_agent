"""
Communication Agent for Investment Portfolio Management

This agent generates professional investment reports (like bank house views)
and provides explanations for portfolio decisions in simple, understandable language.
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import random

from data_sharing import DataSharingManager, get_user_profile_data, get_other_agent_results


@dataclass
class PortfolioRecommendation:
    """Data structure for portfolio recommendations"""
    asset_class: str
    allocation_percentage: float
    rationale: str
    risk_level: str
    expected_return: Optional[float] = None


class CommunicationAgent:
    """
    Communication Agent that translates technical portfolio data into 
    clear, actionable insights for users in bank house view style.
    """
    
    def __init__(self):
        self.data_manager = DataSharingManager()
        
    def generate_investment_report(self, include_explanations: bool = True) -> Dict[str, Any]:
        """
        Generate a comprehensive investment report like bank house views
        
        Args:
            include_explanations: Whether to include detailed explanations
            
        Returns:
            Dict containing the complete investment report
        """
        
        # Get data from other agents
        user_profile = get_user_profile_data()
        risk_analysis = get_other_agent_results("risk_analysis")
        portfolio_data = get_other_agent_results("portfolio_construction")
        selection_data = get_other_agent_results("selection")
        
        if not user_profile:
            return {"error": "No user profile data available"}
        
        # Generate report sections
        report = {
            "report_metadata": self._generate_report_header(),
            "executive_summary": self._generate_executive_summary(user_profile, risk_analysis),
            "investment_strategy": self._generate_investment_strategy(user_profile, risk_analysis),
            "portfolio_allocation": self._generate_allocation_section(portfolio_data, user_profile),
            "individual_recommendations": self._generate_individual_recommendations(selection_data),
            "risk_assessment": self._generate_risk_section(risk_analysis, user_profile),
            "market_outlook": self._generate_market_outlook(),
            "action_plan": self._generate_action_plan(user_profile),
            "disclaimers": self._generate_disclaimers()
        }
        
        if include_explanations:
            report["detailed_explanations"] = self._generate_detailed_explanations(
                user_profile, portfolio_data, selection_data
            )
        
        # Save report for future reference
        self.data_manager.save_agent_output("communication_report", report)
        
        return report
    
    def _generate_report_header(self) -> Dict[str, Any]:
        """Generate professional report header"""
        return {
            "report_title": "Personal Investment Strategy Report",
            "report_type": "Investment House View",
            "generation_date": datetime.now().strftime("%B %d, %Y"),
            "report_id": f"RPT-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
            "prepared_by": "PortfolioAI Investment Advisory",
            "confidentiality": "Personal and Confidential"
        }
    
    def _generate_executive_summary(self, user_profile: Dict, risk_analysis: Optional[Dict]) -> str:
        """Generate executive summary in bank report style"""
        
        primary_goal = user_profile.get('goals', [{}])[0].get('description', 'Wealth Growth')
        time_horizon = user_profile.get('time_horizon', 10)
        risk_level = user_profile.get('risk_tolerance', 'medium')
        
        risk_score = risk_analysis.get('risk_score', 5) if risk_analysis else 5
        
        summary = f"""
        Based on our comprehensive analysis of your financial profile and investment objectives, 
        we recommend a {risk_level} risk portfolio strategy aligned with your primary goal of {primary_goal}.
        
        With a {time_horizon}-year investment horizon and a risk tolerance score of {risk_score}/10, 
        our analysis indicates you are well-positioned to pursue a balanced growth strategy that 
        balances capital appreciation potential with prudent risk management.
        
        Key Investment Themes:
        • Long-term wealth accumulation through diversified equity exposure
        • Risk-adjusted returns appropriate for your profile
        • ESG-conscious investing aligned with your stated preferences
        • Regular portfolio rebalancing to maintain target allocations
        """
        
        return summary.strip()
    
    def _generate_investment_strategy(self, user_profile: Dict, risk_analysis: Optional[Dict]) -> Dict[str, Any]:
        """Generate investment strategy section"""
        
        risk_level = user_profile.get('risk_tolerance', 'medium')
        esg_prefs = user_profile.get('personal_values', {}).get('esg_preferences', {})
        
        strategy_mapping = {
            'low': {
                'strategy_name': 'Conservative Growth Strategy',
                'description': 'Focus on capital preservation with modest growth potential',
                'key_principles': [
                    'Capital preservation as primary objective',
                    'Lower volatility through defensive positioning',
                    'Steady income generation through dividends and bonds',
                    'Gradual wealth accumulation over time'
                ]
            },
            'medium': {
                'strategy_name': 'Balanced Growth Strategy', 
                'description': 'Balanced approach between growth and stability',
                'key_principles': [
                    'Diversified exposure across asset classes',
                    'Moderate risk-taking for enhanced returns',
                    'Regular rebalancing to maintain risk profile',
                    'Focus on quality investments with growth potential'
                ]
            },
            'high': {
                'strategy_name': 'Aggressive Growth Strategy',
                'description': 'Growth-focused approach with higher risk tolerance',
                'key_principles': [
                    'Maximum long-term capital appreciation',
                    'Higher equity allocation for growth potential',
                    'Acceptance of short-term volatility',
                    'Focus on high-growth sectors and emerging markets'
                ]
            }
        }
        
        strategy = strategy_mapping.get(risk_level, strategy_mapping['medium'])
        
        # Add ESG considerations if applicable
        if esg_prefs.get('prefer_industries') or esg_prefs.get('avoid_industries'):
            strategy['esg_integration'] = {
                'approach': 'ESG-Integrated Investment Strategy',
                'focus_areas': esg_prefs.get('prefer_industries', []),
                'exclusions': esg_prefs.get('avoid_industries', []),
                'rationale': 'Aligning investments with personal values while maintaining financial objectives'
            }
        
        return strategy
    
    def _generate_allocation_section(self, portfolio_data: Optional[Dict], user_profile: Dict) -> Dict[str, Any]:
        """Generate portfolio allocation recommendations"""
        
        if portfolio_data and 'asset_classes' in portfolio_data:
            # Use actual portfolio construction data
            allocations = []
            for asset_class, details in portfolio_data['asset_classes'].items():
                allocations.append({
                    'asset_class': asset_class.title(),
                    'allocation': details.get('weight', 0) * 100,
                    'rationale': details.get('rationale', f'Strategic allocation to {asset_class} for portfolio diversification'),
                    'expected_return': details.get('expected_return', 0) * 100 if details.get('expected_return') else None
                })
        else:
            # Generate mock allocations based on risk profile
            risk_level = user_profile.get('risk_tolerance', 'medium')
            allocations = self._generate_mock_allocations(risk_level)
        
        return {
            'recommended_allocation': allocations,
            'allocation_rationale': 'Asset allocation designed to optimize risk-adjusted returns while meeting your specific investment objectives and constraints.',
            'rebalancing_frequency': 'Quarterly review with rebalancing when allocations drift more than 5% from targets'
        }
    
    def _generate_mock_allocations(self, risk_level: str) -> List[Dict[str, Any]]:
        """Generate sample allocations based on risk profile"""
        
        allocation_templates = {
            'low': [
                {'asset_class': 'Bonds', 'allocation': 60, 'rationale': 'Stable income and capital preservation'},
                {'asset_class': 'Equities', 'allocation': 30, 'rationale': 'Modest growth potential through blue-chip stocks'},
                {'asset_class': 'Cash & Equivalents', 'allocation': 10, 'rationale': 'Liquidity and emergency reserves'}
            ],
            'medium': [
                {'asset_class': 'Equities', 'allocation': 60, 'rationale': 'Long-term growth through diversified stock exposure'},
                {'asset_class': 'Bonds', 'allocation': 30, 'rationale': 'Stability and income generation'},
                {'asset_class': 'REITs', 'allocation': 7, 'rationale': 'Real estate diversification and inflation protection'},
                {'asset_class': 'Cash & Equivalents', 'allocation': 3, 'rationale': 'Tactical opportunities and liquidity'}
            ],
            'high': [
                {'asset_class': 'Equities', 'allocation': 80, 'rationale': 'Maximum growth potential through stock market exposure'},
                {'asset_class': 'Growth Stocks', 'allocation': 15, 'rationale': 'High-growth companies and emerging sectors'},
                {'asset_class': 'Bonds', 'allocation': 5, 'rationale': 'Minimal stability component'}
            ]
        }
        
        return allocation_templates.get(risk_level, allocation_templates['medium'])
    
    def _generate_individual_recommendations(self, selection_data: Optional[Dict]) -> List[Dict[str, Any]]:
        """Generate specific investment recommendations"""
        
        if selection_data and 'orders' in selection_data:
            # Use actual selection data
            recommendations = []
            for order in selection_data['orders']:
                recommendations.append({
                    'ticker': order.get('ticker', ''),
                    'name': order.get('name', order.get('ticker', 'Investment')),
                    'recommendation': order.get('action', 'HOLD'),
                    'rationale': order.get('rationale', 'Strategic investment for portfolio diversification'),
                    'allocation': order.get('weight', 0) * 100 if order.get('weight') else None
                })
        else:
            # Generate sample recommendations
            recommendations = [
                {
                    'ticker': 'VTI',
                    'name': 'Vanguard Total Stock Market ETF',
                    'recommendation': 'BUY',
                    'rationale': 'Broad US market exposure with low fees, suitable for long-term growth',
                    'allocation': 40
                },
                {
                    'ticker': 'BND', 
                    'name': 'Vanguard Total Bond Market ETF',
                    'recommendation': 'BUY',
                    'rationale': 'Comprehensive bond market exposure for stability and income',
                    'allocation': 30
                },
                {
                    'ticker': 'VEA',
                    'name': 'Vanguard Developed Markets ETF',
                    'recommendation': 'BUY', 
                    'rationale': 'International diversification across developed markets',
                    'allocation': 20
                },
                {
                    'ticker': 'VNQ',
                    'name': 'Vanguard Real Estate ETF',
                    'recommendation': 'BUY',
                    'rationale': 'Real estate exposure for inflation protection and diversification',
                    'allocation': 10
                }
            ]
        
        return recommendations
    
    def _generate_risk_section(self, risk_analysis: Optional[Dict], user_profile: Dict) -> Dict[str, Any]:
        """Generate risk assessment section"""
        
        risk_tolerance = user_profile.get('risk_tolerance', 'medium')
        
        if risk_analysis:
            risk_score = risk_analysis.get('risk_score', 5)
            risk_capacity = risk_analysis.get('risk_capacity', 'medium')
        else:
            risk_score = 5
            risk_capacity = risk_tolerance
        
        return {
            'risk_profile_summary': f'Your risk profile indicates a {risk_tolerance} tolerance for investment volatility',
            'risk_score': f'{risk_score}/10',
            'risk_capacity': risk_capacity,
            'key_risk_factors': [
                'Market volatility may cause short-term fluctuations in portfolio value',
                'Inflation risk may erode purchasing power over time',
                'Interest rate changes may impact bond valuations',
                'Currency fluctuations may affect international investments'
            ],
            'risk_mitigation_strategies': [
                'Diversification across asset classes and geographic regions',
                'Regular portfolio rebalancing to maintain target risk levels',
                'Long-term investment horizon to ride out market volatility',
                'Quality focus on established companies and funds'
            ]
        }
    
    def _generate_market_outlook(self) -> Dict[str, Any]:
        """Generate current market outlook section"""
        
        return {
            'market_summary': 'Current market conditions support a balanced investment approach',
            'key_themes': [
                'Economic resilience supporting equity markets',
                'Interest rate environment favoring balanced portfolios', 
                'Technology and healthcare sectors showing strong fundamentals',
                'ESG investing gaining institutional adoption'
            ],
            'opportunities': [
                'Quality dividend-paying stocks for income',
                'Technology sector growth potential',
                'International diversification benefits',
                'ESG-focused investments with strong performance'
            ],
            'risks_to_monitor': [
                'Geopolitical tensions affecting global markets',
                'Inflation pressures on consumer spending',
                'Interest rate policy changes',
                'Market valuation levels in certain sectors'
            ]
        }
    
    def _generate_action_plan(self, user_profile: Dict) -> Dict[str, Any]:
        """Generate actionable next steps"""
        
        primary_goal = user_profile.get('goals', [{}])[0].get('description', 'Wealth Growth')
        monthly_savings = user_profile.get('savings_rate', 1000)
        
        return {
            'immediate_actions': [
                'Open investment accounts with recommended brokers',
                f'Set up automatic monthly investment of ${monthly_savings:,.0f}',
                'Begin with core portfolio allocation as recommended',
                'Review and update beneficiary information'
            ],
            'ongoing_actions': [
                'Monitor portfolio performance monthly',
                'Rebalance portfolio quarterly or when allocations drift >5%',
                'Review investment strategy annually or upon major life changes',
                f'Track progress toward {primary_goal} goal'
            ],
            'review_schedule': {
                'monthly': 'Portfolio performance and contribution review',
                'quarterly': 'Rebalancing and allocation review',
                'annually': 'Comprehensive strategy and goal review'
            }
        }
    
    def _generate_disclaimers(self) -> List[str]:
        """Generate standard investment disclaimers"""
        
        return [
            'This report is for informational purposes only and does not constitute investment advice.',
            'Past performance does not guarantee future results.',
            'All investments involve risk, including potential loss of principal.',
            'Consider your personal financial situation before making investment decisions.',
            'Consult with a qualified financial advisor for personalized advice.',
            'Market conditions and recommendations may change over time.'
        ]
    
    def _generate_detailed_explanations(self, user_profile: Dict, portfolio_data: Optional[Dict], 
                                      selection_data: Optional[Dict]) -> Dict[str, str]:
        """Generate detailed explanations for chatbot responses"""
        
        explanations = {}
        
        # Why this portfolio allocation?
        risk_level = user_profile.get('risk_tolerance', 'medium')
        time_horizon = user_profile.get('time_horizon', 10)
        
        explanations['portfolio_allocation'] = f"""
        Your portfolio allocation is designed based on your {risk_level} risk tolerance and {time_horizon}-year time horizon.
        
        A {risk_level} risk profile typically suggests you can handle moderate market fluctuations in exchange for 
        potentially higher returns than conservative investments. With {time_horizon} years to invest, you have 
        sufficient time to recover from short-term market downturns, which allows for a more growth-oriented approach.
        
        The specific allocation percentages are calculated using Modern Portfolio Theory principles to maximize
        expected returns while keeping risk within your comfort zone.
        """
        
        # Why these specific stocks/funds?
        explanations['stock_selection'] = """
        Each investment was selected based on multiple criteria:
        
        1. **Cost Efficiency**: Low expense ratios to maximize your returns over time
        2. **Diversification**: Broad market exposure to reduce single-company risk  
        3. **Quality**: Established funds with strong track records
        4. **Liquidity**: Easy to buy and sell when needed
        5. **Tax Efficiency**: Structured to minimize tax drag on returns
        
        For example, broad market ETFs provide instant diversification across hundreds or thousands of companies,
        while bond funds provide stability and income to balance the stock volatility.
        """
        
        # Why rebalancing is important?
        explanations['rebalancing'] = """
        Portfolio rebalancing is like maintaining your car - it keeps everything running smoothly.
        
        Over time, some investments will grow faster than others, which changes your portfolio's risk level.
        For example, if stocks perform very well, they might grow from 60% to 70% of your portfolio,
        making it riskier than intended.
        
        Rebalancing means selling some of the investments that have grown too large and buying more
        of those that have shrunk. This maintains your target risk level and can actually improve
        returns by systematically "buying low and selling high."
        """
        
        return explanations
    
    def answer_user_question(self, question: str) -> str:
        """
        Answer user questions about their portfolio in simple language
        
        Args:
            question: User's question about their portfolio
            
        Returns:
            Simple, clear answer
        """
        
        # Get the latest report for context
        report_data = self.data_manager.get_agent_output("communication_report")
        user_profile = get_user_profile_data()
        
        question_lower = question.lower()
        
        # Simple keyword-based question answering
        if any(word in question_lower for word in ['why', 'portfolio', 'allocation', 'percentage']):
            return self._explain_portfolio_allocation(user_profile, report_data)
        
        elif any(word in question_lower for word in ['stock', 'fund', 'etf', 'selection', 'choose', 'pick']):
            return self._explain_investment_selection(report_data)
        
        elif any(word in question_lower for word in ['risk', 'safe', 'dangerous', 'volatility']):
            return self._explain_risk_approach(user_profile, report_data)
        
        elif any(word in question_lower for word in ['rebalance', 'adjust', 'change', 'maintain']):
            return self._explain_rebalancing()
        
        elif any(word in question_lower for word in ['return', 'profit', 'gain', 'performance']):
            return self._explain_expected_returns(user_profile, report_data)
        
        elif any(word in question_lower for word in ['esg', 'sustainable', 'ethical', 'green']):
            return self._explain_esg_approach(user_profile)
        
        else:
            return self._provide_general_guidance(question)
    
    def _explain_portfolio_allocation(self, user_profile: Dict, report_data: Optional[Dict]) -> str:
        """Explain why this specific portfolio allocation was chosen"""
        
        risk_level = user_profile.get('risk_tolerance', 'medium')
        time_horizon = user_profile.get('time_horizon', 10)
        age_proxy = 65 - time_horizon  # Rough age estimate
        
        response = f"""
        Your portfolio allocation is designed specifically for your situation:
        
        **Your Profile:**
        • Risk tolerance: {risk_level.title()}
        • Time horizon: {time_horizon} years
        • Investment goal: {user_profile.get('goals', [{}])[0].get('description', 'Long-term growth')}
        
        **Why This Mix:**
        With {time_horizon} years to invest, you have time to ride out market ups and downs, so we can 
        include growth investments like stocks. Your {risk_level} risk tolerance means you're comfortable 
        with some fluctuation in exchange for potentially higher returns.
        
        **The Logic:**
        • **Stocks** for long-term growth (you have time to recover from short-term drops)
        • **Bonds** for stability and regular income
        • **Diversification** across different types of investments to reduce overall risk
        
        This allocation follows the time-tested principle: the longer your timeline, the more growth 
        investments you can handle safely.
        """
        
        return response.strip()
    
    def _explain_investment_selection(self, report_data: Optional[Dict]) -> str:
        """Explain why specific investments were chosen"""
        
        return """
        We selected these specific investments based on proven investment principles:
        
        **Our Selection Criteria:**
        1. **Low Costs** - High fees eat into your returns over time
        2. **Broad Diversification** - Don't put all eggs in one basket  
        3. **Strong Track Record** - Proven performance over many years
        4. **Liquidity** - Easy to buy/sell when you need to
        5. **Tax Efficiency** - Minimize taxes on your gains
        
        **Why ETFs vs Individual Stocks:**
        Instead of picking individual companies (which is risky and time-consuming), we recommend 
        broad-market ETFs that own hundreds or thousands of companies. This way:
        • If one company fails, it barely affects you
        • You get exposure to the entire market's growth
        • Professional management at low cost
        • No need to research individual companies
        
        **Examples:**
        • A Total Stock Market ETF owns pieces of virtually every major US company
        • A Bond ETF owns thousands of different bonds for steady income
        • An International ETF gives you exposure to companies worldwide
        
        Think of it like owning a tiny piece of the entire economy rather than betting on specific companies.
        """
    
    def _explain_risk_approach(self, user_profile: Dict, report_data: Optional[Dict]) -> str:
        """Explain the risk management approach"""
        
        risk_level = user_profile.get('risk_tolerance', 'medium')
        
        risk_explanations = {
            'low': 'conservative approach focused on protecting your money',
            'medium': 'balanced approach between growth and safety', 
            'high': 'growth-focused approach accepting more short-term ups and downs'
        }
        
        approach = risk_explanations.get(risk_level, 'balanced approach')
        
        return f"""
        Your portfolio takes a {approach} to risk:
        
        **Your Risk Level: {risk_level.title()}**
        This means you're comfortable with {
            'minimal' if risk_level == 'low' else 
            'moderate' if risk_level == 'medium' else 'significant'
        } fluctuations in your portfolio value.
        
        **How We Manage Risk:**
        • **Diversification** - Spread money across different types of investments
        • **Quality Focus** - Choose established, well-managed funds
        • **Time Horizon** - Your long timeline helps smooth out short-term bumps
        • **Regular Review** - Monitor and adjust as needed
        
        **What This Means Day-to-Day:**
        • Your portfolio value will go up and down - that's normal
        • Focus on long-term trends, not daily changes
        • Bad months or even bad years can happen, but historically markets recover
        • The key is staying invested and not panicking during downturns
        
        **Risk vs. Reward:**
        Higher risk investments (like stocks) have more ups and downs but historically 
        provide better returns over long periods. Lower risk investments (like bonds) 
        are steadier but grow more slowly.
        
        Your mix is designed to give you growth potential while keeping risk at a level 
        you can sleep comfortably with.
        """
    
    def _explain_rebalancing(self) -> str:
        """Explain portfolio rebalancing in simple terms"""
        
        return """
        **Rebalancing Explained Simply:**
        
        Think of your portfolio like a garden with different types of plants. Over time, some 
        plants grow faster than others, and your garden starts to look unbalanced.
        
        **What Happens Without Rebalancing:**
        • Stocks might grow from 60% to 80% of your portfolio (too risky)
        • Bonds might shrink from 40% to 20% (less stability)
        • Your risk level increases beyond what you're comfortable with
        
        **What Rebalancing Does:**
        • Sell some of the investments that have grown too large
        • Buy more of the investments that have gotten too small
        • Return your portfolio to your target mix (like pruning your garden)
        
        **Why It Helps:**
        1. **Maintains Your Risk Level** - Keeps you in your comfort zone
        2. **Forces Good Habits** - Automatically "buy low, sell high"
        3. **Improves Returns** - Studies show rebalanced portfolios often perform better
        
        **When to Rebalance:**
        • Every 3-6 months, or
        • When any investment gets more than 5% off target
        • Don't do it too often (increases costs and taxes)
        
        **Example:**
        If your target is 60% stocks, 40% bonds, but after a good year you have 70% stocks, 
        30% bonds, you'd sell some stocks and buy some bonds to get back to 60/40.
        
        It's like maintaining your car - regular tune-ups keep everything running smoothly!
        """
    
    def _explain_expected_returns(self, user_profile: Dict, report_data: Optional[Dict]) -> str:
        """Explain expected returns and performance"""
        
        risk_level = user_profile.get('risk_tolerance', 'medium')
        time_horizon = user_profile.get('time_horizon', 10)
        
        return f"""
        **Expected Returns for Your Portfolio:**
        
        **Realistic Expectations:**
        Based on your {risk_level} risk portfolio, you might expect average annual returns of:
        • Conservative: 4-6% per year
        • Moderate: 6-8% per year  
        • Aggressive: 8-10% per year
        
        **Important Realities:**
        • These are LONG-TERM averages over {time_horizon}+ years
        • Some years will be much higher, some much lower (even negative)
        • The stock market has never lost money over any 15-year period historically
        • But it has lost money in many 1-year and 5-year periods
        
        **What "6-8% Average" Actually Looks Like:**
        Year 1: +15% (great year!)
        Year 2: -8% (market downturn)
        Year 3: +12% (recovery)
        Year 4: +3% (slow growth)
        Year 5: +22% (boom year)
        Average over 5 years: ~8.8%
        
        **Key Points:**
        • Don't expect steady 7% every year - it doesn't work that way
        • Focus on 5+ year periods, not month-to-month changes
        • Your actual returns will depend on market conditions during your investing period
        • Starting early and staying consistent matters more than perfect timing
        
        **Realistic Timeline for Goals:**
        With consistent investing and market-average returns, you're on track to meet 
        your goal of {user_profile.get('goals', [{}])[0].get('description', 'building wealth')} 
        within your {time_horizon}-year timeline.
        """
    
    def _explain_esg_approach(self, user_profile: Dict) -> str:
        """Explain ESG/sustainable investing approach"""
        
        esg_prefs = user_profile.get('personal_values', {}).get('esg_preferences', {})
        
        if not esg_prefs.get('prefer_industries') and not esg_prefs.get('avoid_industries'):
            return """
            You didn't specify particular ESG (Environmental, Social, Governance) preferences, 
            so your portfolio focuses primarily on financial performance.
            
            However, many of the recommended broad-market funds naturally include companies 
            with good ESG practices, as these often correlate with good long-term business performance.
            
            If you'd like to incorporate more ESG-focused investing in the future, we can 
            adjust your portfolio to include specific ESG funds or exclude certain industries.
            """
        
        return f"""
        **Your ESG Investment Approach:**
        
        Based on your preferences, we've incorporated sustainable investing principles:
        
        **What You Prefer:**
        {f"• Industries you want MORE of: {', '.join(esg_prefs.get('prefer_industries', []))}" if esg_prefs.get('prefer_industries') else ""}
        {f"• Industries you want to AVOID: {', '.join(esg_prefs.get('avoid_industries', []))}" if esg_prefs.get('avoid_industries') else ""}
        
        **How We Implement This:**
        • Select ESG-focused funds when available
        • Choose broad market funds that screen out problematic companies
        • Prioritize companies with strong environmental and social practices
        • Look for funds that vote their shares responsibly
        
        **ESG and Returns:**
        • ESG investing doesn't mean sacrificing returns
        • Companies with good ESG practices often perform better long-term
        • ESG funds have become very competitive with traditional funds
        • You're investing in the future you want to see
        
        **Trade-offs:**
        • Slightly higher fees for some ESG funds (but we choose low-cost options)
        • Some diversification limits (avoiding certain sectors)
        • Smaller universe of investment options
        
        **The Bottom Line:**
        Your portfolio aligns your money with your values while still pursuing strong 
        financial performance. You're proving you don't have to choose between doing 
        good and doing well financially.
        """
    
    def _provide_general_guidance(self, question: str) -> str:
        """Provide general investment guidance for unclear questions"""
        
        return f"""
        Thanks for your question: "{question}"
        
        I'd be happy to help explain your investment strategy! Here are the main topics I can help with:
        
        **Portfolio Questions:**
        • "Why this allocation?" - I'll explain your specific asset mix
        • "Why these investments?" - I'll explain how we selected your funds/stocks
        • "How much risk am I taking?" - I'll explain your risk level and management
        
        **Performance Questions:**
        • "What returns should I expect?" - I'll give realistic expectations
        • "When should I rebalance?" - I'll explain portfolio maintenance
        
        **Strategy Questions:**
        • "Why ESG investing?" - I'll explain sustainable investment choices
        • "How does this help my goals?" - I'll connect strategy to your objectives
        
        **Simple Questions Work Best:**
        • "Why do I own bonds?"
        • "Is this portfolio risky?"
        • "When will I see returns?"
        • "Should I change anything?"
        
        Feel free to ask about any specific part of your investment plan - I'm here to 
        make sure you understand and feel confident about your financial future!
        """


# Example usage and testing
if __name__ == "__main__":
    
    # Test the communication agent
    comm_agent = CommunicationAgent()
    
    print("=== Testing Communication Agent ===")
    
    # Generate a sample report
    report = comm_agent.generate_investment_report()
    
    if "error" not in report:
        print("✅ Investment report generated successfully")
        print(f"Report ID: {report['report_metadata']['report_id']}")
        print(f"Executive Summary: {report['executive_summary'][:200]}...")
    else:
        print(f"❌ Report generation failed: {report['error']}")
    
    # Test chatbot functionality
    sample_questions = [
        "Why do you recommend this portfolio allocation?",
        "Why did you choose these specific stocks?",
        "Is this portfolio risky for me?",
        "What returns should I expect?"
    ]
    
    print("\n=== Testing Chatbot Responses ===")
    for question in sample_questions:
        print(f"\nQ: {question}")
        answer = comm_agent.answer_user_question(question)
        print(f"A: {answer[:150]}...")
    
    print("\n✅ Communication Agent testing completed")
