/**
 * Investment Report Component
 * 
 * This component displays professional investment reports generated by the Communication Agent
 * and provides Q&A functionality for users to ask questions about their portfolio.
 */

"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import { 
  FileText, 
  MessageSquare, 
  RefreshCw, 
  Download, 
  Clock,
  CheckCircle,
  AlertCircle,
  Send
} from "lucide-react"

interface InvestmentReport {
  report_title: string
  generated_date: string
  client_id: string
  executive_summary: string
  allocation_rationale: string
  selection_rationale: string
  risk_commentary: string
  key_recommendations: string[]
  next_steps: string[]
  portfolio_allocation?: Record<string, number>
  individual_holdings?: Array<{
    name: string
    symbol: string
    allocation_percent: number
    value: number
  }>
  pdf_available?: boolean
  pdf_filename?: string
  report_metadata?: {
    generated_by: string
    report_type: string
    timestamp: string
  }
}

interface QAItem {
  question: string
  answer: string
  timestamp: string
}

export function InvestmentReportComponent() {
  const [report, setReport] = useState<InvestmentReport | null>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [qaHistory, setQAHistory] = useState<QAItem[]>([])
  const [currentQuestion, setCurrentQuestion] = useState("")
  const [askingQuestion, setAskingQuestion] = useState(false)
  const [activeTab, setActiveTab] = useState<"report" | "qa">("report")

  // Load existing report on component mount
  useEffect(() => {
    loadExistingReport()
  }, [])

  const loadExistingReport = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/report/latest')
      if (response.ok) {
        const result = await response.json()
        setReport(result.report)
      }
    } catch (error) {
      console.log("No existing report found")
    }
  }

  const downloadPDF = async () => {
    if (!report || !(report as any).pdf_filename) {
      alert('PDF not available. Please generate a report first.')
      return
    }

    try {
      const filename = (report as any).pdf_filename
      const response = await fetch(`http://localhost:8000/api/download-report/${filename}`)
      
      if (response.ok) {
        const blob = await response.blob()
        const url = window.URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = filename
        document.body.appendChild(a)
        a.click()
        window.URL.revokeObjectURL(url)
        document.body.removeChild(a)
      } else {
        alert('Failed to download PDF')
      }
    } catch (error) {
      console.error('Error downloading PDF:', error)
      alert('Error downloading PDF')
    }
  }

  const generateReport = async () => {
    setLoading(true)
    setError(null)
    
    try {
      // Try to get actual portfolio data from localStorage first
      const savedPortfolio = localStorage.getItem('portfolioai_portfolio')
      const savedReport = localStorage.getItem('portfolioai_report')
      const savedFullResult = localStorage.getItem('portfolioai_full_result')
      
      let portfolioData = null
      let reportData = null
      let fullResult = null
      
      try {
        if (savedPortfolio) portfolioData = JSON.parse(savedPortfolio)
        if (savedReport) reportData = JSON.parse(savedReport)
        if (savedFullResult) fullResult = JSON.parse(savedFullResult)
      } catch (e) {
        console.error('Error parsing localStorage data:', e)
      }
      
      // If we have actual portfolio data, use it; otherwise use preset
      const requestBody = (portfolioData && reportData) ? {
        portfolio: portfolioData,
        report: reportData,
        fullResult: fullResult
      } : null
      
      const response = await fetch('http://localhost:8000/api/generate-report', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: requestBody ? JSON.stringify(requestBody) : undefined
      })
      
      if (response.ok) {
        const result = await response.json()
        setReport(result.report)
        
        // Show success message
        alert('Investment report generated successfully!')
      } else {
        const errorResult = await response.json()
        setError(errorResult.detail || 'Failed to generate report')
      }
    } catch (error) {
      setError('Network error: Unable to generate report')
      console.error('Error generating report:', error)
    } finally {
      setLoading(false)
    }
  }

  const askQuestion = async () => {
    if (!currentQuestion.trim()) return
    
    setAskingQuestion(true)
    
    try {
      const response = await fetch('http://localhost:8003/api/ask-question', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ question: currentQuestion })
      })
      
      if (response.ok) {
        const result = await response.json()
        
        const newQA: QAItem = {
          question: currentQuestion,
          answer: result.answer,
          timestamp: new Date().toLocaleString()
        }
        
        setQAHistory(prev => [...prev, newQA])
        setCurrentQuestion("")
      } else {
        const errorResult = await response.json()
        alert(`Error: ${errorResult.detail}`)
      }
    } catch (error) {
      alert('Network error: Unable to ask question')
      console.error('Error asking question:', error)
    } finally {
      setAskingQuestion(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      askQuestion()
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-foreground">Investment Analysis Report</h2>
          <p className="text-muted-foreground">Professional portfolio analysis and recommendations</p>
        </div>
        <div className="flex items-center space-x-2">
          <Button 
            onClick={generateReport} 
            disabled={loading}
            className="gap-2"
          >
            {loading ? (
              <RefreshCw className="w-4 h-4 animate-spin" />
            ) : (
              <FileText className="w-4 h-4" />
            )}
            {loading ? 'Generating...' : 'Generate Report'}
          </Button>
        </div>
      </div>

      {/* Error Display */}
      {error && (
        <Card className="border-red-200 bg-red-50">
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <AlertCircle className="w-5 h-5 text-red-500" />
              <p className="text-red-700">{error}</p>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Tab Navigation */}
      <div className="flex space-x-1 bg-muted p-1 rounded-lg">
        <button
          onClick={() => setActiveTab("report")}
          className={`flex-1 px-4 py-2 rounded-md transition-colors ${
            activeTab === "report" 
              ? "bg-background shadow-sm text-foreground" 
              : "text-muted-foreground hover:text-foreground"
          }`}
        >
          <div className="flex items-center justify-center space-x-2">
            <FileText className="w-4 h-4" />
            <span>Investment Report</span>
          </div>
        </button>
        <button
          onClick={() => setActiveTab("qa")}
          className={`flex-1 px-4 py-2 rounded-md transition-colors ${
            activeTab === "qa" 
              ? "bg-background shadow-sm text-foreground" 
              : "text-muted-foreground hover:text-foreground"
          }`}
        >
          <div className="flex items-center justify-center space-x-2">
            <MessageSquare className="w-4 h-4" />
            <span>Ask Questions</span>
            {qaHistory.length > 0 && (
              <Badge variant="secondary" className="ml-1">
                {qaHistory.length}
              </Badge>
            )}
          </div>
        </button>
      </div>

      {/* Report Tab */}
      {activeTab === "report" && (
        <div className="space-y-6">
          {report ? (
            <>
              {/* Report Header */}
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle className="text-xl">{report.report_title}</CardTitle>
                      <div className="flex items-center space-x-4 text-sm text-muted-foreground mt-2">
                        <div className="flex items-center space-x-1">
                          <Clock className="w-4 h-4" />
                          <span>Generated: {report.generated_date}</span>
                        </div>
                        <div className="flex items-center space-x-1">
                          <CheckCircle className="w-4 h-4 text-green-500" />
                          <span>Profile ID: {report.client_id}</span>
                        </div>
                      </div>
                    </div>
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="gap-2"
                      onClick={downloadPDF}
                      disabled={!(report as any).pdf_available}
                    >
                      <Download className="w-4 h-4" />
                      Download PDF
                    </Button>
                  </div>
                </CardHeader>
              </Card>

              {/* Executive Summary */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Executive Summary</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-foreground leading-relaxed">{report.executive_summary}</p>
                </CardContent>
              </Card>

              {/* Allocation Rationale */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Portfolio Allocation Strategy</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-foreground leading-relaxed whitespace-pre-line">{report.allocation_rationale}</p>
                </CardContent>
              </Card>

              {/* Portfolio Allocation Breakdown */}
              {report.portfolio_allocation && (
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Asset Allocation Breakdown</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {Object.entries(report.portfolio_allocation).map(([assetClass, percentage]) => (
                        <div key={assetClass} className="flex items-center justify-between">
                          <span className="text-sm font-medium">{assetClass}</span>
                          <div className="flex items-center gap-2">
                            <div className="w-32 h-2 bg-muted rounded-full overflow-hidden">
                              <div 
                                className="h-full bg-primary" 
                                style={{ width: `${percentage}%` }}
                              />
                            </div>
                            <span className="text-sm font-semibold w-12 text-right">{percentage.toFixed(1)}%</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Individual Holdings */}
              {report.individual_holdings && report.individual_holdings.length > 0 && (
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Individual Holdings</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead>
                          <tr className="border-b">
                            <th className="text-left py-2 px-2 text-sm font-semibold">Symbol</th>
                            <th className="text-left py-2 px-2 text-sm font-semibold">Name</th>
                            <th className="text-right py-2 px-2 text-sm font-semibold">Allocation</th>
                            <th className="text-right py-2 px-2 text-sm font-semibold">Value</th>
                          </tr>
                        </thead>
                        <tbody>
                          {report.individual_holdings.map((holding, index) => (
                            <tr key={index} className="border-b hover:bg-muted/50">
                              <td className="py-2 px-2 text-sm font-medium">{holding.symbol}</td>
                              <td className="py-2 px-2 text-sm">{holding.name}</td>
                              <td className="py-2 px-2 text-sm text-right">{holding.allocation_percent.toFixed(1)}%</td>
                              <td className="py-2 px-2 text-sm text-right font-medium">
                                ${holding.value.toLocaleString()}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Selection Rationale */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Investment Selection Rationale</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-foreground leading-relaxed whitespace-pre-line">{report.selection_rationale}</p>
                </CardContent>
              </Card>

              {/* Risk Commentary */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Risk Analysis & Commentary</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-foreground leading-relaxed whitespace-pre-line">{report.risk_commentary}</p>
                </CardContent>
              </Card>

              {/* Recommendations */}
              <div className="grid md:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Key Recommendations</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {report.key_recommendations.map((rec, index) => (
                        <li key={index} className="flex items-start space-x-2">
                          <CheckCircle className="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" />
                          <span className="text-foreground">{rec}</span>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Next Steps</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {report.next_steps.map((step, index) => (
                        <li key={index} className="flex items-start space-x-2">
                          <div className="w-6 h-6 rounded-full bg-primary/10 text-primary text-xs flex items-center justify-center mt-0.5 flex-shrink-0">
                            {index + 1}
                          </div>
                          <span className="text-foreground">{step}</span>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>
              </div>

              {/* Report Metadata */}
              {(report as any).report_metadata && (
                <Card className="bg-muted/50">
                  <CardContent className="p-4">
                    <div className="text-sm text-muted-foreground">
                      <p>Report generated by: {(report as any).report_metadata.generated_by}</p>
                      <p>Report type: {(report as any).report_metadata.report_type}</p>
                    </div>
                  </CardContent>
                </Card>
              )}
            </>
          ) : (
            <Card>
              <CardContent className="p-8 text-center">
                <FileText className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-medium text-foreground mb-2">No Report Available</h3>
                <p className="text-muted-foreground mb-4">
                  Generate your investment analysis report to see detailed portfolio recommendations and explanations.
                </p>
                <Button onClick={generateReport} disabled={loading} className="gap-2">
                  <FileText className="w-4 h-4" />
                  Generate Investment Report
                </Button>
              </CardContent>
            </Card>
          )}
        </div>
      )}

      {/* Q&A Tab */}
      {activeTab === "qa" && (
        <div className="space-y-6">
          {/* Question Input */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Ask About Your Portfolio</CardTitle>
              <p className="text-muted-foreground">
                Get detailed explanations about portfolio decisions, allocation strategies, and investment selections.
              </p>
            </CardHeader>
            <CardContent>
              <div className="flex space-x-2">
                <Textarea
                  placeholder="Ask about allocation strategy, investment selections, risk management, or any other portfolio question..."
                  value={currentQuestion}
                  onChange={(e) => setCurrentQuestion(e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="min-h-[100px]"
                />
                <Button 
                  onClick={askQuestion} 
                  disabled={askingQuestion || !currentQuestion.trim()}
                  className="gap-2 self-end"
                >
                  {askingQuestion ? (
                    <RefreshCw className="w-4 h-4 animate-spin" />
                  ) : (
                    <Send className="w-4 h-4" />
                  )}
                  Ask
                </Button>
              </div>
              
              {/* Common Questions */}
              <div className="mt-4">
                <p className="text-sm text-muted-foreground mb-2">Common questions:</p>
                <div className="flex flex-wrap gap-2">
                  {[
                    "Why was this allocation chosen for my portfolio?",
                    "How does this portfolio align with my risk tolerance?",
                    "Why were these specific investments selected?",
                    "What are the main risks in my portfolio?",
                    "How often should I review my portfolio?"
                  ].map((question, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      size="sm"
                      onClick={() => setCurrentQuestion(question)}
                      className="text-xs"
                    >
                      {question}
                    </Button>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Q&A History */}
          <div className="space-y-4">
            {qaHistory.length === 0 ? (
              <Card>
                <CardContent className="p-8 text-center">
                  <MessageSquare className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-foreground mb-2">No Questions Asked Yet</h3>
                  <p className="text-muted-foreground">
                    Ask questions about your portfolio allocation, investment selections, or risk management strategy.
                  </p>
                </CardContent>
              </Card>
            ) : (
              qaHistory.map((qa, index) => (
                <Card key={index}>
                  <CardContent className="p-6">
                    <div className="space-y-4">
                      {/* Question */}
                      <div>
                        <div className="flex items-start space-x-2 mb-2">
                          <MessageSquare className="w-5 h-5 text-primary mt-0.5" />
                          <p className="font-medium text-foreground">{qa.question}</p>
                        </div>
                        <p className="text-xs text-muted-foreground ml-7">Asked on {qa.timestamp}</p>
                      </div>
                      
                      {/* Answer */}
                      <div className="ml-7 pl-4 border-l-2 border-muted">
                        <p className="text-foreground leading-relaxed whitespace-pre-line">{qa.answer}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))
            )}
          </div>
        </div>
      )}
    </div>
  )
}
